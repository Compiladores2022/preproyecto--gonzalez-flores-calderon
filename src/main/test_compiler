#!/bin/bash

# tests if the given file contains a valid program by executing it and checking if the output
# have an error message
function testValidProgram {
    total_tests=total_tests+1
    file_output=$(./script_generated/a.out $file)
    if [[ "$file_output" == *"$error_message"* ]]; #output contains error message
    then
        printf "\n\n${RED}Test $file_number - $file failed:${NORMAL}\n\n$file_output"
    else
        tests_passed=tests_passed+1
    fi
    file_number=file_number+1
}

# tests if the given file contains an invalid program by executing it and checking if the output
# doesn't have an error message
function testInvalidProgram {
    total_tests=total_tests+1
    file_output=$(./script_generated/a.out $file)
    if [[ "$file_output" != *"$error_message"* ]]; #output doesn't contains error message
    then
        printf "\n\n${RED}Test $file_number - $file failed, compiler didn't detect the error in:${NORMAL}\n\n$file_output"
    else
        tests_passed=tests_passed+1
    fi
    file_number=file_number+1
}

flex calc-lexico.l 
bison -d calc-sintaxis.y
gcc lex.yy.c calc-sintaxis.tab.c

mv lex.yy.c script_generated/lex.yy.c
mv calc-sintaxis.tab.c script_generated/calc-sintaxis.tab.c
mv calc-sintaxis.tab.h script_generated/calc-sintaxis.tab.h
mv a.out script_generated/a.out

declare -i tests_passed=0
declare -i total_tests=0
RED=$(tput setaf 1) #red color for error messages
NORMAL=$(tput sgr0) #normal color
error_message="-> ERROR"

declare -i file_number=1
printf "Testing valid programs\n";
for file in ../test/resources/acceptedPrograms/*; do
    testValidProgram
done

file_number=1
printf "\n\n\nTesting Invalid programs\n";
for file in ../test/resources/invalidPrograms/*; do
    testInvalidProgram    
done

printf "\n\n$tests_passed tests passed out of $total_tests\n"